// <auto-generated />
using GenesisVision.DataModel;
using GenesisVision.DataModel.Enums;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace GenesisVision.Tournament.Core.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180202091645_Scheme")]
    partial class Scheme
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125");

            modelBuilder.Entity("GenesisVision.DataModel.Models.Charts", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Index");

                    b.Property<Guid>("TradeAccountId");

                    b.Property<int>("Type");

                    b.Property<decimal>("Value");

                    b.HasKey("Id");

                    b.HasIndex("TradeAccountId");

                    b.ToTable("Charts");
                });

            modelBuilder.Entity("GenesisVision.DataModel.Models.Participants", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.Property<DateTime>("RegDate");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Participants");
                });

            modelBuilder.Entity("GenesisVision.DataModel.Models.Tournaments", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateFrom");

                    b.Property<DateTime>("DateTo");

                    b.Property<string>("Description");

                    b.Property<bool>("IsEnabled");

                    b.Property<DateTime?>("RegisterDateFrom");

                    b.Property<DateTime?>("RegisterDateTo");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("GenesisVision.DataModel.Models.TradeAccounts", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("IpfsHash");

                    b.Property<long>("Login");

                    b.Property<int>("OrdersCount");

                    b.Property<Guid?>("ParticipantId");

                    b.Property<string>("Password");

                    b.Property<decimal>("StartBalance");

                    b.Property<decimal>("TotalProfit");

                    b.Property<decimal>("TotalProfitInPercent");

                    b.Property<Guid>("TournamentId");

                    b.Property<Guid>("TradeServerId");

                    b.HasKey("Id");

                    b.HasIndex("ParticipantId")
                        .IsUnique();

                    b.HasIndex("TournamentId");

                    b.HasIndex("TradeServerId");

                    b.ToTable("TradeAccounts");
                });

            modelBuilder.Entity("GenesisVision.DataModel.Models.Trades", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<int>("Direction");

                    b.Property<decimal>("Price");

                    b.Property<decimal>("Profit");

                    b.Property<string>("Symbol");

                    b.Property<long>("Ticket");

                    b.Property<Guid>("TradeAccountId");

                    b.Property<decimal>("Volume");

                    b.HasKey("Id");

                    b.HasIndex("TradeAccountId");

                    b.ToTable("Trades");
                });

            modelBuilder.Entity("GenesisVision.DataModel.Models.TradeServers", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Host");

                    b.Property<string>("Title");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("TradeServers");
                });

            modelBuilder.Entity("GenesisVision.DataModel.Models.Charts", b =>
                {
                    b.HasOne("GenesisVision.DataModel.Models.TradeAccounts", "TradeAccount")
                        .WithMany("Charts")
                        .HasForeignKey("TradeAccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GenesisVision.DataModel.Models.TradeAccounts", b =>
                {
                    b.HasOne("GenesisVision.DataModel.Models.Participants", "Participant")
                        .WithOne("TradeAccount")
                        .HasForeignKey("GenesisVision.DataModel.Models.TradeAccounts", "ParticipantId");

                    b.HasOne("GenesisVision.DataModel.Models.Tournaments", "Tournament")
                        .WithMany("TradeAccounts")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GenesisVision.DataModel.Models.TradeServers", "TradeServer")
                        .WithMany("TradeAccounts")
                        .HasForeignKey("TradeServerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GenesisVision.DataModel.Models.Trades", b =>
                {
                    b.HasOne("GenesisVision.DataModel.Models.TradeAccounts", "TradeAccount")
                        .WithMany("Trades")
                        .HasForeignKey("TradeAccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
